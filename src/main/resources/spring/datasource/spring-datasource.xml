<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       		           http://www.springframework.org/schema/beans/spring-beans.xsd"
       default-autowire="byName">
    <!-- 配置数据库连接 -->
    <bean id="springDatasourceBasic" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、person、password -->
        <property name="driverClassName" value="${spring.datasource.driver-class-name}"/>
        <property name="url" value="${spring.datasource.url}"/>
        <property name="username" value="${spring.datasource.username}"/>
        <property name="password" value="${spring.datasource.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <property name="maxActive" value="1000"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="3000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
        <property name="proxyFilters">
            <list>
                <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4j2Filter">
                    <!-- 所有连接相关的日志 -->
                    <property name="connectionLogEnabled" value="false"/>
                    <!-- 所有Statement相关的日志 -->
                    <property name="statementLogEnabled" value="false"/>
                    <!-- 是否显示结果集 -->
                    <property name="resultSetLogEnabled" value="true"/>
                    <!-- 是否显示SQL语句 -->
                    <property name="statementExecutableSqlLogEnable" value="true"/>
                </bean>
            </list>
        </property>

    </bean>

    <bean id="basicSqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="springDatasourceBasic"/>
        <!--<property name="configLocation" value="classpath:sql_map_service_config.xml" />-->
        <!-- 去掉sql_map_service_config配置 -->
        <property name="typeAliasesPackage"
                  value="com.mark85.basic.entity,"
        />
        <property name="mapperLocations">
            <array>
                <value>classpath*:mybatis/*.xml</value>
            </array>
        </property>
        <property name="globalConfig">
            <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig">
                <property name="banner" value="false"/>
                <property name="metaObjectHandler" ref="mybatisPlusMetaObjectHandler"/>
            </bean>
        </property>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!--使用下面的方式配置参数，一行配置一个 -->
                        <value>
                            helperDialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
        <!-- DO类型的包路劲，如果配置了该项，在mybatis配置xml里parameterType,ResultType直接以类名为别名，不用再加上路劲-->
    </bean>

    <bean id="basicMapperScannerConfigurer"
          class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.mark85.basic.mapper"
          p:sqlSessionFactoryBeanName="basicSqlSessionFactory"/>
    <bean id="basicTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="springDatasourceBasic"/>
    <bean id="basicTransactionTemplate"
          class="org.springframework.transaction.support.TransactionTemplate"
          p:transactionManager-ref="basicTransactionManager"/>
</beans>
